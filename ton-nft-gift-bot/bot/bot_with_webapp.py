import os
import logging
import sqlite3
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8373706621:AAFTOCrsNuSuov9pBzj1C1xk7vvC3zo01Nk"
WEBAPP_URL = "https://fantastic-marigold-515e07.netlify.app"
ADMIN_ID = 1376689155

# –°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
MARKETPLACE_LINKS = {
    'portal': 'https://t.me/portals/market?startapp=68k7zv',
    'mrkt': 'https://t.me/mrkt/app?startapp=1376689155',
    'virus': 'https://t.me/virus_play_bot/app?startapp=roulette_inviteCodeNyzVY2nYykGxC8Lx'
}


class CasinoBot:
    def __init__(self, token: str):
        self.token = token
        self.application = None
        self.init_database()
        self.setup_application()

    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            os.makedirs('bot', exist_ok=True)
            conn = sqlite3.connect('bot/casino.db', check_same_thread=False, timeout=30)
            conn.execute("PRAGMA journal_mode=WAL")
            return conn
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
            return None

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        try:
            conn = self.get_db_connection()
            if conn is None:
                return

            cursor = conn.cursor()

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    balance INTEGER DEFAULT 666,
                    games_played INTEGER DEFAULT 0,
                    total_won INTEGER DEFAULT 0,
                    biggest_win INTEGER DEFAULT 0,
                    wins_count INTEGER DEFAULT 0,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    amount INTEGER,
                    type TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')

            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö casino.db —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            self.application = Application.builder().token(self.token).build()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("app", self.app_command))
            self.application.add_handler(CommandHandler("casino", self.casino_command))
            self.application.add_handler(CommandHandler("play", self.play_command))
            self.application.add_handler(CommandHandler("admin", self.admin_command))
            self.application.add_handler(CommandHandler("addstars", self.add_stars_command))
            self.application.add_handler(CommandHandler("userinfo", self.user_info_command))
            self.application.add_handler(CommandHandler("topusers", self.top_users_command))
            self.application.add_handler(CallbackQueryHandler(self.button_handler))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

    def get_user_data_from_db(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã"""
        try:
            conn = self.get_db_connection()
            if conn is None:
                return None

            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            conn.close()

            if result:
                return {
                    'user_id': result[0],
                    'username': result[1],
                    'first_name': result[2],
                    'balance': result[3],
                    'games_played': result[4],
                    'total_won': result[5],
                    'biggest_win': result[6],
                    'wins_count': result[7],
                    'created_at': result[8]
                }
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã: {e}")
            return None

    def update_user_data_in_db(self, user_data):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ"""
        try:
            conn = self.get_db_connection()
            if conn is None:
                return False

            cursor = conn.cursor()
            cursor.execute('''
                UPDATE users SET 
                balance = ?, 
                games_played = ?, 
                total_won = ?, 
                biggest_win = ?, 
                wins_count = ? 
                WHERE user_id = ?
            ''', (
                user_data['balance'],
                user_data['games_played'],
                user_data['total_won'],
                user_data['biggest_win'],
                user_data['wins_count'],
                user_data['user_id']
            ))
            conn.commit()
            conn.close()
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ: {e}")
            return False

    def create_user_in_db(self, user_id, username, first_name):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ"""
        try:
            conn = self.get_db_connection()
            if conn is None:
                return False

            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO users (user_id, username, first_name, balance) VALUES (?, ?, ?, ?)',
                (user_id, username, first_name, 666)
            )
            conn.commit()
            conn.close()
            logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ: {first_name} (ID: {user_id})")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ: {e}")
            return False

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "admin_panel":
            if query.from_user.id == ADMIN_ID:
                await self.show_admin_panel(query)
            else:
                await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

    async def show_admin_panel(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            conn = self.get_db_connection()
            if conn is None:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            cursor = conn.cursor()

            cursor.execute('''
                SELECT COUNT(*) as total_users, 
                       SUM(balance) as total_balance,
                       SUM(games_played) as total_games,
                       SUM(total_won) as total_won
                FROM users
            ''')
            stats = cursor.fetchone()

            cursor.execute('SELECT COUNT(*) FROM transactions WHERE status = "pending"')
            pending_deposits = cursor.fetchone()[0]

            conn.close()

            admin_text = (
                f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats[0]}</b>\n"
                f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{stats[1] or 0} ‚≠ê</b>\n"
                f"üé∞ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{stats[2] or 0}</b>\n"
                f"üèÜ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: <b>{stats[3] or 0} ‚≠ê</b>\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{pending_deposits}</b>\n\n"
                "üíé <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:</b>\n"
                "<code>/addstars user_id amount</code> - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã\n"
                "<code>/userinfo user_id</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
                "<code>/topusers</code> - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            )

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_panel")],
                [InlineKeyboardButton("üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_top_users")]
            ]

            await query.edit_message_text(
                admin_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

    async def handle_webapp_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
        try:
            user = update.effective_user
            webapp_data = update.effective_message.web_app_data

            logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}: {webapp_data.data}")

            if webapp_data:
                data = json.loads(webapp_data.data)
                action = data.get('action')

                logger.info(f"üîß Action: {action}, Data: {data}")

                if action == 'sync_user_data':
                    # –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –° –ë–ê–ó–û–ô
                    user_id = data.get('user_id')

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                    db_user_data = self.get_user_data_from_db(user_id)

                    if db_user_data:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ WebApp
                        await update.message.reply_text(
                            f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π!\n"
                            f"üí∞ –ë–∞–ª–∞–Ω—Å: {db_user_data['balance']} ‚≠ê\n"
                            f"üé∞ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {db_user_data['games_played']}",
                            parse_mode='HTML'
                        )
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        self.create_user_in_db(
                            user_id,
                            user.username or "–ë–µ–∑ username",
                            user.first_name or "–ò–≥—Ä–æ–∫"
                        )
                        await update.message.reply_text("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ!")

                elif action == 'update_balance':
                    # –û–ë–ù–û–í–õ–Ø–ï–ú –î–ê–ù–ù–´–ï –í –ë–ê–ó–ï
                    user_id = data.get('user_id')
                    balance = data.get('balance', 0)
                    games_played = data.get('games_played', 0)
                    total_won = data.get('total_won', 0)
                    biggest_win = data.get('biggest_win', 0)
                    wins_count = data.get('wins_count', 0)

                    user_data = {
                        'user_id': user_id,
                        'balance': balance,
                        'games_played': games_played,
                        'total_won': total_won,
                        'biggest_win': biggest_win,
                        'wins_count': wins_count
                    }

                    success = self.update_user_data_in_db(user_data)

                    if success:
                        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –±–∞–∑–µ: –±–∞–ª–∞–Ω—Å={balance}")
                        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ!")
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ")
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")

                elif action == 'deposit_request':
                    amount = data.get('amount', 0)
                    user_id = data.get('user_id')

                    logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: user_id={user_id}, amount={amount}")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É
                    conn = self.get_db_connection()
                    if conn:
                        cursor = conn.cursor()
                        cursor.execute(
                            'INSERT INTO transactions (user_id, amount, type, status) VALUES (?, ?, ?, ?)',
                            (user_id, amount, 'deposit', 'pending')
                        )
                        conn.commit()
                        conn.close()

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    admin_text = (
                        f"üí∞ <b>–ó–ê–ü–†–û–° –ù–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
                        f"üÜî ID: <code>{user_id}</code>\n"
                        f"üìõ Username: @{user.username or '–Ω–µ—Ç'}\n"
                        f"üíé –°—É–º–º–∞: {amount} ‚≠ê\n\n"
                        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                        f"<code>/addstars {user_id} {amount}</code>"
                    )

                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=admin_text,
                        parse_mode='HTML'
                    )

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await update.message.reply_text(
                        f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                        f"üíé –°—É–º–º–∞: {amount} ‚≠ê\n"
                        f"üë§ –í–∞—à ID: {user_id}\n\n"
                        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                        parse_mode='HTML'
                    )

                    logger.info(f"üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user_id}): {amount} ‚≠ê")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebApp: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            user_data = self.get_user_data_from_db(user.id)
            if not user_data:
                self.create_user_in_db(
                    user.id,
                    user.username or "–ë–µ–∑ username",
                    user.first_name or "–ò–≥—Ä–æ–∫"
                )
                user_data = self.get_user_data_from_db(user.id)

            balance = user_data['balance'] if user_data else 666

            welcome_text = (
                f"üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CASINO Totki, {user.first_name}!</b>\n\n"
                f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} ‚≠ê\n"
                f"üÜî <b>ID –∏–≥—Ä–æ–∫–∞:</b> {user.id}\n\n"
                "üéØ <b>–í—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã!</b>\n\n"
                "üëá <i>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</i>"
            )

            keyboard = [
                [InlineKeyboardButton("üé∞ –ò–≥—Ä–∞—Ç—å –≤ CASINO Totki", web_app=WebAppInfo(url=WEBAPP_URL))],
                [
                    InlineKeyboardButton("üåê Portal", url=MARKETPLACE_LINKS['portal']),
                    InlineKeyboardButton("üõçÔ∏è MRKT", url=MARKETPLACE_LINKS['mrkt'])
                ],
                [InlineKeyboardButton("ü¶† Virus", url=MARKETPLACE_LINKS['virus'])]
            ]

            if user.id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin_panel")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            user = update.effective_user

            if user.id != ADMIN_ID:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return

            conn = self.get_db_connection()
            if conn is None:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            cursor = conn.cursor()

            cursor.execute('''
                SELECT COUNT(*) as total_users, 
                       SUM(balance) as total_balance,
                       SUM(games_played) as total_games,
                       SUM(total_won) as total_won
                FROM users
            ''')
            stats = cursor.fetchone()

            cursor.execute('SELECT COUNT(*) FROM transactions WHERE status = "pending"')
            pending_deposits = cursor.fetchone()[0]

            conn.close()

            admin_text = (
                f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats[0]}</b>\n"
                f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{stats[1] or 0} ‚≠ê</b>\n"
                f"üé∞ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{stats[2] or 0}</b>\n"
                f"üèÜ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: <b>{stats[3] or 0} ‚≠ê</b>\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{pending_deposits}</b>\n\n"
                "üíé <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:</b>\n"
                "<code>/addstars user_id amount</code> - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã\n"
                "<code>/userinfo user_id</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
                "<code>/topusers</code> - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            )

            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_panel")],
                [InlineKeyboardButton("üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_top_users")]
            ]

            await update.message.reply_text(
                admin_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin: {e}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º WebApp –¥–∞–Ω–Ω—ã–µ
            if update.message and update.message.web_app_data:
                await self.handle_webapp_data(update, context)
                return

            user = update.effective_user
            text = update.message.text

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
            if user.id == ADMIN_ID:
                if text.startswith('/addstars'):
                    await self.handle_add_stars(update, context)
                elif text.startswith('/userinfo'):
                    await self.handle_user_info(update, context)
                elif text.startswith('/topusers'):
                    await self.handle_top_users(update, context)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def add_stars_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addstars"""
        await self.handle_add_stars(update, context)

    async def user_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /userinfo"""
        await self.handle_user_info(update, context)

    async def top_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /topusers"""
        await self.handle_top_users(update, context)

    async def handle_add_stars(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            parts = update.message.text.split()
            if len(parts) != 3:
                await update.message.reply_text(
                    "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addstars user_id amount\n"
                    "–ü—Ä–∏–º–µ—Ä: /addstars 123456789 100"
                )
                return

            user_id = int(parts[1])
            amount = int(parts[2])

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.get_user_data_from_db(user_id)
            if not user_data:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            current_balance = user_data['balance']
            new_balance = current_balance + amount

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ
            user_data['balance'] = new_balance
            success = self.update_user_data_in_db(user_data)

            if success:
                # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                conn = self.get_db_connection()
                if conn:
                    cursor = conn.cursor()
                    cursor.execute(
                        'UPDATE transactions SET status = "completed" WHERE user_id = ? AND status = "pending"',
                        (user_id,)
                    )
                    conn.commit()
                    conn.close()

                await update.message.reply_text(
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['first_name']} (ID: {user_id}) –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                    f"üí∞ –ë—ã–ª–æ: {current_balance} ‚≠ê\n"
                    f"üí∞ –°—Ç–∞–ª–æ: {new_balance} ‚≠ê\n"
                    f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: +{amount} ‚≠ê"
                )

                logger.info(f"üí∞ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–∏–ª {amount} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['first_name']} (ID: {user_id})")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addstars user_id amount")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥")

    async def handle_user_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            parts = update.message.text.split()
            if len(parts) != 2:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /userinfo user_id")
                return

            user_id = int(parts[1])
            user_data = self.get_user_data_from_db(user_id)

            if not user_data:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            user_info = (
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
                f"üÜî ID: <code>{user_data['user_id']}</code>\n"
                f"üë§ –ò–º—è: <b>{user_data['first_name']}</b>\n"
                f"üìõ Username: @{user_data['username'] or '–Ω–µ—Ç'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user_data['balance']} ‚≠ê</b>\n"
                f"üé∞ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{user_data['games_played']}</b>\n"
                f"üèÜ –í—ã–∏–≥—Ä–∞–Ω–æ: <b>{user_data['total_won']} ‚≠ê</b>\n"
                f"üìà –†–µ–∫–æ—Ä–¥: <b>{user_data['biggest_win']} ‚≠ê</b>\n"
                f"üéØ –ü–æ–±–µ–¥: <b>{user_data['wins_count']}</b>\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{user_data['created_at']}</b>"
            )

            await update.message.reply_text(user_info, parse_mode='HTML')

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /userinfo user_id")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")

    async def handle_top_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É"""
        try:
            conn = self.get_db_connection()
            if conn is None:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, first_name, username, balance, total_won 
                FROM users 
                ORDER BY balance DESC 
                LIMIT 10
            ''')
            top_users = cursor.fetchall()
            conn.close()

            if not top_users:
                await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            top_text = "üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É</b>\n\n"

            for i, (user_id, first_name, username, balance, total_won) in enumerate(top_users, 1):
                username_display = f"@{username}" if username else "–±–µ–∑ username"
                top_text += (
                    f"{i}. <b>{first_name}</b> ({username_display})\n"
                    f"   üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} ‚≠ê</b>\n"
                    f"   üèÜ –í—ã–∏–≥—Ä–∞–Ω–æ: <b>{total_won} ‚≠ê</b>\n\n"
                )

            await update.message.reply_text(top_text, parse_mode='HTML')

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    async def app_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app - –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ WebApp"""
        try:
            user = update.effective_user
            user_data = self.get_user_data_from_db(user.id)
            balance = user_data['balance'] if user_data else 666

            keyboard = [
                [InlineKeyboardButton("üé∞ –ó–ê–ü–£–°–¢–ò–¢–¨ CASINO TOTKI", web_app=WebAppInfo(url=WEBAPP_URL))],
                [
                    InlineKeyboardButton("üåê Portal", url=MARKETPLACE_LINKS['portal']),
                    InlineKeyboardButton("üõçÔ∏è MRKT", url=MARKETPLACE_LINKS['mrkt'])
                ],
                [InlineKeyboardButton("ü¶† Virus", url=MARKETPLACE_LINKS['virus'])]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"üé∞ <b>–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ CASINO Totki</b>\n\n"
                f"üí∞ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {balance} ‚≠ê\n\n"
                "üëá <i>–ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä –∞–∑–∞—Ä—Ç–∞!</i>",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /app: {e}")

    async def casino_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /casino - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∑–∏–Ω–æ"""
        try:
            user = update.effective_user
            user_data = self.get_user_data_from_db(user.id)
            balance = user_data['balance'] if user_data else 666

            casino_info = (
                f"üé∞ <b>CASINO TOTKI - –ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã</b>\n\n"
                f"üí∞ <b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {balance} ‚≠ê\n\n"
                "üõçÔ∏è <b>–¢–æ–ø –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã:</b>\n"
                "‚Ä¢ <b>Portal</b> - –ø–æ–∫—É–ø–∞–π –∏ –ø—Ä–æ–¥–∞–≤–∞–π NFT\n"
                "‚Ä¢ <b>MRKT</b> - —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
                "‚Ä¢ <b>Virus</b> - –ª–æ–º–∞–π –±–ª–æ–∫–∏ –º–∞–π–Ω–∞ –∏ –≤—ã–±–∏–≤–∞–π –∫—Ä—É—Ç—ã–µ NFT!\n\n"
                "üëá <i>–ù–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>"
            )

            keyboard = [
                [InlineKeyboardButton("üé∞ –ù–ê–ß–ê–¢–¨ –ò–ì–†–ê–¢–¨", web_app=WebAppInfo(url=WEBAPP_URL))],
                [
                    InlineKeyboardButton("üåê Portal", url=MARKETPLACE_LINKS['portal']),
                    InlineKeyboardButton("üõçÔ∏è MRKT", url=MARKETPLACE_LINKS['mrkt']),
                    InlineKeyboardButton("ü¶† Virus", url=MARKETPLACE_LINKS['virus'])
                ]
            ]

            await update.message.reply_text(
                casino_info,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /casino: {e}")

    async def play_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /play - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã"""
        try:
            user = update.effective_user
            user_data = self.get_user_data_from_db(user.id)
            balance = user_data['balance'] if user_data else 666

            quick_start = (
                f"üé∞ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã!</b>\n\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} ‚≠ê\n\n"
                "üöÄ <b>–ì–æ—Ç–æ–≤ –∫ –ø–æ–±–µ–¥–∞–º?</b>\n"
                "üëá <i>–ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ —É–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!</i>"
            )

            keyboard = [
                [InlineKeyboardButton("üé∞ –ö–†–£–¢–ò–¢–¨ –ë–ê–†–ê–ë–ê–ù–´!", web_app=WebAppInfo(url=WEBAPP_URL))],
                [
                    InlineKeyboardButton("üåê Portal", url=MARKETPLACE_LINKS['portal']),
                    InlineKeyboardButton("üõçÔ∏è MRKT", url=MARKETPLACE_LINKS['mrkt'])
                ]
            ]

            await update.message.reply_text(
                quick_start,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /play: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üé∞ –ó–ê–ü–£–°–ö CASINO TOTKI BOT...")
    print("=" * 50)

    bot = None
    try:
        bot = CasinoBot(BOT_TOKEN)

        if bot.application is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return

        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"üåê WebApp URL: {WEBAPP_URL}")
        print(f"üëë Admin ID: {ADMIN_ID}")
        print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        print("   /app   - –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∫–∞–∑–∏–Ω–æ")
        print("   /casino - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∑–∏–Ω–æ")
        print("   /play  - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã")
        print("   /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("   /addstars - –î–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã (–∞–¥–º–∏–Ω)")
        print("   /userinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∞–¥–º–∏–Ω)")
        print("   /topusers - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)")
        print("=" * 50)
        print("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

        bot.application.run_polling()

    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        print("üé∞ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == '__main__':
    main()